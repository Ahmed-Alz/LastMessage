import tkinter as tk
from tkinter import PhotoImage, simpledialog
import time

class StatusApp:
    def __init__(self, root, time_limit):
        self.root = root
        self.time_limit = time_limit  # Total countdown time in seconds
        self.start_time = time.time()
        self.elapsed_pause = 0
        self.paused = False
        self.current_image = None

        # Load images for statuses
        self.images = {
            "green": PhotoImage(file="green.png"),
            "yellow": PhotoImage(file="yellow.png"),
            "orange": PhotoImage(file="orange.png"),
            "red": PhotoImage(file="red.png"),
        }

        # Create GUI elements
        self.status_label = tk.Label(root, text=f"Time Limit: {self.time_limit} seconds", font=("Arial", 14))
        self.status_label.pack()

        self.time_label = tk.Label(root, text="Elapsed Time: 0.00 seconds", font=("Arial", 14))
        self.time_label.pack()

        self.remaining_label = tk.Label(root, text=f"Time Remaining: {self.time_limit:.2f} seconds", font=("Arial", 14))
        self.remaining_label.pack()

        self.image_label = tk.Label(root)
        self.image_label.pack()

        self.button_frame = tk.Frame(root)
        self.button_frame.pack()

        self.press_button = tk.Button(self.button_frame, text="Press Me", command=self.reset_timer, font=("Arial", 12))
        self.press_button.pack(side="left", padx=5)

        self.pause_button = tk.Button(self.button_frame, text="Pause", command=self.toggle_pause, font=("Arial", 12))
        self.pause_button.pack(side="left", padx=5)

        self.reset_button = tk.Button(self.button_frame, text="Reset Timer", command=self.prompt_new_time_limit, font=("Arial", 12))
        self.reset_button.pack(side="left", padx=5)

        # Start the countdown loop
        self.update_status()

    def update_status(self):
        if not self.paused:
            elapsed_time = time.time() - self.start_time + self.elapsed_pause
            time_remaining = max(0, self.time_limit - elapsed_time)
            percentage_elapsed = elapsed_time / self.time_limit

            # Update the elapsed time label
            self.time_label.config(text=f"Elapsed Time: {elapsed_time:.2f} seconds")

            # Update the remaining time label
            self.remaining_label.config(text=f"Time Remaining: {time_remaining:.2f} seconds")

            # Determine status based on elapsed percentage
            if percentage_elapsed < 0.6:
                self.set_image("green")
            elif percentage_elapsed < 0.8:
                self.set_image("yellow")
            elif percentage_elapsed < 0.9:
                self.set_image("orange")
            else:
                self.set_image("red")

        # Keep updating unless the timer has expired
        if not self.paused and elapsed_time < self.time_limit:
            self.root.after(100, self.update_status)
        elif self.paused:
            self.root.after(100, self.update_status)  # Check again after 100 ms if paused

    def set_image(self, status):
        if self.current_image != status:
            self.current_image = status
            self.image_label.config(image=self.images[status])

    def reset_timer(self):
        self.start_time = time.time()
        self.elapsed_pause = 0
        self.paused = False
        self.set_image("green")  # Reset to green immediately
        self.update_status()

    def toggle_pause(self):
        if self.paused:
            # Resume
            self.start_time = time.time()
            self.pause_button.config(text="Pause")
        else:
            # Pause
            self.elapsed_pause += time.time() - self.start_time
            self.pause_button.config(text="Resume")
        self.paused = not self.paused

    def prompt_new_time_limit(self):
        new_time_limit = simpledialog.askinteger(
            "Set Timer", "Enter new countdown time (seconds):", minvalue=1
        )
        if new_time_limit is not None:
            self.time_limit = new_time_limit
            self.status_label.config(text=f"Time Limit: {self.time_limit} seconds")
            self.reset_timer()


# Create the main application window
root = tk.Tk()
root.title("Status Indicator")

# Prompt the user for the countdown time limit
time_limit = simpledialog.askinteger(
    "Set Timer", "Enter countdown time (seconds):", minvalue=1
)

if time_limit is not None:
    app = StatusApp(root, time_limit)
    root.mainloop()
else:
    print("No time limit entered. Exiting.")
